{"ast":null,"code":"var _jsxFileName = \"/Users/yb/Documents/dev/react/reminder-sample/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport List from './components/List';\nimport Template from './components/Template';\nimport Insert from './components/Insert';\n//  import AddItem from './pages/AddItems';\n// import Insert from './components/Insert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const url = \"https://script.google.com/macros/s/AKfycbygey9yu0fTzDGTjMtPk1XuLgmPJ7XysoQWkCBuWiuNpFvZxUJePWc2bx85dIzL0roM/exec\";\n  const [beforeDateTime, setBeforeDateTime] = useState();\n  const [intervalTimeText, setIntervalTimeText] = useState();\n  const [items, setItems] = useState();\n\n  // const [timerId,setTimerId] = useState();\n\n  /* const data = {\n      reqType: 'execution',\n    };\n   */\n\n  /*   const data2 = {\n      reqType :'saveNow'\n      }; */\n\n  // post 요청\n  /*   async function getValue (){\n    \n      await axios.post(url,data, {\n            headers: {\n              \"Content-Type\": \"text/plain;charset=utf-8\",\n            allowRedirects: false \n            }\n          }).then(res => {\n           setBeforeDateTime(res.data) ;\n            setTime();\n    \n        }).catch(err => {\n          console.log(err)\n        });\n  \n    } */\n\n  async function getValue() {\n    await axios.post(url, {\n      reqType: 'execution'\n    }, {\n      headers: {\n        \"Content-Type\": \"text/plain;charset=utf-8\",\n        allowRedirects: false\n      }\n    }).then(res => {\n      console.log(res.data);\n      setItems(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  /* function setTime () {\n    let now = new Date();\n    const deffer = now - Date.parse(beforeDateTime);\n    const day = deffer/(1000*3600*24);\n    const hour = ((deffer%(1000*3600*24))/(1000*3600));\n    const minute = ((deffer%(1000*3600*24))%(1000*3600))/(1000*60);\n    const second = ((deffer%(1000*3600*24))%(1000*3600))%(1000*60)/1000;\n    setIntervalTimeText(Math.floor(day)+'일 '+Math.floor(hour)+'시 '+Math.floor(minute)+'분'+Math.floor(second)+'초') ;\n  } */\n\n  // 페이지 바로 동작\n  getValue();\n\n  // 현재시간 저장 요청\n\n  /* async function onSave () {\n    await axios.post(url,{reqType: 'saveNow'}, {\n      headers: {\n        \"Content-Type\" : \"text/plain;charset=utf-8\",\n        allowRedirects: false\n      }\n    }).then(res=> {\n    getValue();\n    setTime();\n   \n    }).catch(err => {\n      console.log(err);\n    })\n  } */\n\n  async function onDeleteRow(rowToDelete) {\n    await axios.post(url, {\n      reqType: 'deleteRow',\n      rowToDelete: {\n        rowToDelete\n      }\n    }, {\n      headers: {\n        \"Content-Type\": \"text/plain;charset=utf-8\",\n        allowRedirects: false\n      }\n    }).then(res => {\n      setItems(res.data);\n      console.log(\"행이 제거됐는지 확인하세요. 다음은 응답값입니다. >>>\" + res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Template, {\n      children: [/*#__PURE__*/_jsxDEV(Insert, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        items: items,\n        onDeleteRow: onDeleteRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"48YsnBnoiNwNR5t665FKwcIn86M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","axios","List","Template","Insert","jsxDEV","_jsxDEV","App","_s","url","beforeDateTime","setBeforeDateTime","intervalTimeText","setIntervalTimeText","items","setItems","getValue","post","reqType","headers","allowRedirects","then","res","console","log","data","catch","err","onDeleteRow","rowToDelete","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yb/Documents/dev/react/reminder-sample/src/App.js"],"sourcesContent":["import './App.css';\nimport React , {useState, useCallback} from 'react';\nimport axios from 'axios';\nimport List from './components/List'\nimport Template from './components/Template'\nimport Insert from './components/Insert'\n//  import AddItem from './pages/AddItems';\n// import Insert from './components/Insert';\n\n\n\n\nconst App = () => {\n\n  const url = \"https://script.google.com/macros/s/AKfycbygey9yu0fTzDGTjMtPk1XuLgmPJ7XysoQWkCBuWiuNpFvZxUJePWc2bx85dIzL0roM/exec\"\n\n\n  const [beforeDateTime, setBeforeDateTime] = useState();\n  const [intervalTimeText,setIntervalTimeText] = useState();\n  const [items, setItems] = useState();\n\n // const [timerId,setTimerId] = useState();\n\n\n/* const data = {\n    reqType: 'execution',\n  };\n */\n\n\n  \n/*   const data2 = {\n    reqType :'saveNow'\n    }; */\n\n// post 요청\n/*   async function getValue (){\n  \n    await axios.post(url,data, {\n          headers: {\n            \"Content-Type\": \"text/plain;charset=utf-8\",\n          allowRedirects: false \n          }\n        }).then(res => {\n         setBeforeDateTime(res.data) ;\n          setTime();\n  \n      }).catch(err => {\n        console.log(err)\n      });\n\n  } */\n  \n  async function getValue (){\n  \n    await axios.post(url,{ reqType: 'execution'},{\n          headers: {\n              \"Content-Type\": \"text/plain;charset=utf-8\",\n            allowRedirects: false \n    }}).then(res => {\n         console.log(res.data) ;\n       setItems(res.data);\n  \n      }).catch(err => {\n        console.log(err)\n      });\n    }\n/* function setTime () {\n  let now = new Date();\n  const deffer = now - Date.parse(beforeDateTime);\n  const day = deffer/(1000*3600*24);\n  const hour = ((deffer%(1000*3600*24))/(1000*3600));\n  const minute = ((deffer%(1000*3600*24))%(1000*3600))/(1000*60);\n  const second = ((deffer%(1000*3600*24))%(1000*3600))%(1000*60)/1000;\n  setIntervalTimeText(Math.floor(day)+'일 '+Math.floor(hour)+'시 '+Math.floor(minute)+'분'+Math.floor(second)+'초') ;\n} */\n\n\n  // 페이지 바로 동작\n getValue();\n\n\n// 현재시간 저장 요청\n\n/* async function onSave () {\n  await axios.post(url,{reqType: 'saveNow'}, {\n    headers: {\n      \"Content-Type\" : \"text/plain;charset=utf-8\",\n      allowRedirects: false\n    }\n  }).then(res=> {\n  getValue();\n  setTime();\n \n  }).catch(err => {\n    console.log(err);\n  })\n} */\n\n\nasync function onDeleteRow (rowToDelete) {\n  await axios.post(url,{reqType :'deleteRow', rowToDelete : {rowToDelete}}, {\n    headers: {\n      \"Content-Type\" : \"text/plain;charset=utf-8\",\n      allowRedirects: false\n    }\n  }).then(res=> {\n    setItems(res.data);\n    console.log(\"행이 제거됐는지 확인하세요. 다음은 응답값입니다. >>>\"+res.data);\n  }).catch(err => {\n    console.log(err)\n  });\n}\n\n\nreturn (\n\n  <div> \n{/*         <div>직전 마지막 수행 시각 : {beforeDateTime}</div>\n          <div>경과시간 : {intervalTimeText}</div>\n            <button onClick={onSave}>초기화</button> \n        <hr/>\n          <h3>&lt;입력란&gt;</h3><br/>\n          <form>\n            제목 : <input name='title' type = 'text' placeholder='제목을 입력 하세요.' value={title} onChange={onChangeTitle}/>\n            주기 : <input name='targetPeriod' type = 'text' placeholder='주기를 숫자로 입력하세요' value={targetPeriod} onChange={onChangeTargetPeriod}/>\n            <button type='submit'>생성</button>\n          </form> */}\n\n\n\n\n\n    <Template>\n      <Insert/>\n      <List  items={items} onDeleteRow={onDeleteRow}/>\n    </Template>\n \n     </div>\n\n\n\n\n  );\n\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}