{"ast":null,"code":"var _jsxFileName = \"/Users/yb/Documents/dev/react/reminder-sample/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport useGoogleSheet from './libs/googlesheet.ts';\nimport file from './date.txt';\nimport axios from 'axios';\n\n// 처음에는 현재날짜를 표시하는 기능을 만든다.\n// 날짜를 표현하는 텍스트 , 버튼을 클릭시 클릭시점의 날짜와 시간표시\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const axios = require('axios');\n  // 지정된 ID를 가진 유저에 대한 요청\n  axios.get('/user?ID=12345').then(function (response) {\n    // 성공 핸들링\n    console.log(response);\n  }).catch(function (error) {\n    // 에러 핸들링\n    console.log(error);\n  }).finally(function () {\n    // 항상 실행되는 영역\n  });\n  const [standardTime, setStandardTime] = useState('');\n  console.log('시작');\n  console.log(typeof \"시작\");\n  //const [data] = useGoogleSheet(0);\n  //console.log(data[0][0])\n  console.log(typeof data);\n  //const languageList = ['value1'];\n\n  const today = new Date();\n  console.log(typeof today);\n  fetch(file).then(r => r.text()).then(text => {\n    setStandardTime(text);\n  });\n  const onReset = () => {\n    setStandardTime('소중이마지막물갈이시각 : ' + today.toDateString() + \"/\" + today.toTimeString());\n    console.log('re : ' + standardTime);\n    fetch(file).then(r => r.text()).then(text => {\n      setStandardTime(text);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), standardTime, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onReset,\n      children: \"\\uB9AC\\uC14B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hYc9ndEYFM0e9eRohvYR7gvgRHY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useGoogleSheet","file","axios","jsxDEV","_jsxDEV","App","_s","require","get","then","response","console","log","catch","error","finally","standardTime","setStandardTime","data","today","Date","fetch","r","text","onReset","toDateString","toTimeString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/yb/Documents/dev/react/reminder-sample/src/App.js"],"sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\nimport useGoogleSheet from './libs/googlesheet.ts';\nimport file from './date.txt';\nimport axios from 'axios';\n\n\n// 처음에는 현재날짜를 표시하는 기능을 만든다.\n// 날짜를 표현하는 텍스트 , 버튼을 클릭시 클릭시점의 날짜와 시간표시\n\n\n\nconst App = () => {\n  const axios = require('axios');\n  // 지정된 ID를 가진 유저에 대한 요청\naxios.get('/user?ID=12345')\n.then(function (response) {\n  // 성공 핸들링\n  console.log(response);\n})\n.catch(function (error) {\n  // 에러 핸들링\n  console.log(error);\n})\n.finally(function () {\n  // 항상 실행되는 영역\n});\n\n  const [standardTime, setStandardTime] = useState('');\n  console.log('시작');\n  console.log(typeof \"시작\");\n  //const [data] = useGoogleSheet(0);\n  //console.log(data[0][0])\n  console.log(typeof data)\n  //const languageList = ['value1'];\n  \n  const today = new Date();\n  console.log(typeof today);\n  \n\n  fetch(file)\n  .then(r => r.text())\n  .then(text => {\n   setStandardTime(text);\n });\n\n  const onReset = () => {\n     setStandardTime('소중이마지막물갈이시각 : '+today.toDateString()+\"/\"+today.toTimeString());\n\n     console.log('re : '+standardTime);\n\n     fetch(file)\n .then(r => r.text())\n .then(text => {\n  setStandardTime(text);\n});\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n      {/*   {data.map((row) => {\n          return (<div>아이디: {row[languageList[0]]}</div>)\n        })} */}\n      </div>\n      {standardTime}\n      <button onClick={onReset} >리셋</button>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,KAAK,MAAM,OAAO;;AAGzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMJ,KAAK,GAAGK,OAAO,CAAC,OAAO,CAAC;EAC9B;EACFL,KAAK,CAACM,GAAG,CAAC,gBAAgB,CAAC,CAC1BC,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACxB;IACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACvB,CAAC,CAAC,CACDG,KAAK,CAAC,UAAUC,KAAK,EAAE;IACtB;IACAH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACpB,CAAC,CAAC,CACDC,OAAO,CAAC,YAAY;IACnB;EAAA,CACD,CAAC;EAEA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpDY,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;EACjBD,OAAO,CAACC,GAAG,CAAC,OAAO,IAAI,CAAC;EACxB;EACA;EACAD,OAAO,CAACC,GAAG,CAAC,OAAOM,IAAI,CAAC;EACxB;;EAEA,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;EACxBT,OAAO,CAACC,GAAG,CAAC,OAAOO,KAAK,CAAC;EAGzBE,KAAK,CAACpB,IAAI,CAAC,CACVQ,IAAI,CAACa,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC,CACnBd,IAAI,CAACc,IAAI,IAAI;IACbN,eAAe,CAACM,IAAI,CAAC;EACvB,CAAC,CAAC;EAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACnBP,eAAe,CAAC,gBAAgB,GAACE,KAAK,CAACM,YAAY,EAAE,GAAC,GAAG,GAACN,KAAK,CAACO,YAAY,EAAE,CAAC;IAE/Ef,OAAO,CAACC,GAAG,CAAC,OAAO,GAACI,YAAY,CAAC;IAEjCK,KAAK,CAACpB,IAAI,CAAC,CACdQ,IAAI,CAACa,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC,CACnBd,IAAI,CAACc,IAAI,IAAI;MACbN,eAAe,CAACM,IAAI,CAAC;IACvB,CAAC,CAAC;EACA,CAAC;EAED,oBACEnB,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBxB,OAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAIM,EACLhB,YAAY,eACbZ,OAAA;MAAQ6B,OAAO,EAAET,OAAQ;MAAAI,QAAA,EAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClC;AAEV,CAAC;AAAA1B,EAAA,CAzDKD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA2DT,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}